name: Reusable K8s Manifest Update

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      image_name:
        required: true
        type: string
      version:
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: true
      DOCKER_USERNAME:
        required: true

jobs:
  k8s-manifest-update:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Kubernetes repo
        run: |
          echo "Cloning Kubernetes repo..."
          git clone https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/MANISANKARDIVI/k8s-test.git
          cd k8s-test
          git pull
          git checkout production
          cd ${{ inputs.service_name }}/production
          echo "Using version: ${{ inputs.version }}"
          echo "Updating image version in deployment.yaml..."
          sed -i "s|image: ${{ secrets.DOCKER_USERNAME }}/${{ inputs.image_name }}:.*|image: ${{ secrets.DOCKER_USERNAME }}/${{ inputs.image_name }}:${{ inputs.version }}|" deployment.yaml
          grep "image: ${{ secrets.DOCKER_USERNAME }}/${{ inputs.image_name }}:" deployment.yaml

      - name: Check for changes and commit if updated
        run: |
          cd k8s-test
          git config --global user.email "manisankar.divi@gmail.com"
          git config --global user.name "Mani"
          git add .
          if git diff --cached --exit-code --quiet; then
            echo "No changes detected in deployment.yaml. Skipping commit."
            echo "SKIP_BRANCH=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Committing changes."
            git commit -m "Updated deployment.yaml for [${{ inputs.service_name }}] with version ${{ inputs.version }} | GitHub Actions Pipeline"
            echo "SKIP_BRANCH=false" >> $GITHUB_ENV
          fi

      - name: Create and push new branch with version (if changes exist)
        if: env.SKIP_BRANCH == 'false'
        run: |
          cd k8s-test
          NEW_BRANCH="release/${{ inputs.image_name }}-v${{ inputs.version }}"

          # Check if the branch already exists
          if git ls-remote --exit-code --heads origin "$NEW_BRANCH"; then
              echo "Branch $NEW_BRANCH already exists. Skipping branch creation."
              exit 0
          fi

          # Create and push the new branch if it does not exist
          echo "Creating new branch $NEW_BRANCH..."
          git checkout -b "$NEW_BRANCH"
          echo "Pushing branch $NEW_BRANCH to origin..."
          git push origin "$NEW_BRANCH"
          echo "Branch $NEW_BRANCH created and pushed successfully."
