---
name: node-pipeline
on:
  push:
    branches:
      - production
    paths:
      - .github/workflows/node.yml
      - node/**

  pull_request:
    branches:
      - production
    paths:
      - .github/workflows/node.yml
      - node/**

jobs:
  dependency-install:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: "16"
          cache: npm
          cache-dependency-path: node/package-lock.json

      - name: Install dependencies and build
        run: |
          cd node
          npm install
          npm run build

  docker_build_push:
    runs-on: ubuntu-24.04
    needs: dependency-install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        id: read_version
        run: |
          cd node
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION | xargs)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "VERSION file not found!"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/production'
        run: |
          cd node
          docker buildx build -t manisankardivi/node-aud .
          docker push manisankardivi/node-aud:${{ env.VERSION }}

  k8s-manifest-files_update:
    runs-on: ubuntu-24.04
    needs: docker_build_push
    if: github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from VERSION file
        run: |
          echo "Listing files in the repository root:"
          ls -la
          echo "Navigating to api directory:"
          cd node
          VERSION=$(cat VERSION)
          echo "Version extracted: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Save version to environment variable

      - name: Checkout Kubernetes repo
        run: |
          echo "Cloning Kubernetes repo..."
          git clone https://github.com/MANISANKARDIVI/k8s-test.git
          ls -la
          cd k8s-test
          git pull
          git checkout production
          cd node/production
          ls -la
          echo "Using version: $VERSION"
          echo "Updating image version in deployment.yaml..."
          sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/node-aud:$VERSION|" k8s-test/node/production/deployment.yaml
          echo "Image Section after update:"
          grep "image: ${{ secrets.DOCKER_USERNAME }}/node-aud:" deployment.yaml

      - name: Check for changes and commit if updated
        run: |
          ls -la && ls k8s-test/node/production
          cd k8s-test
          git config --global user.email "manisankardivi@gmail.com"
          git config --global user.name "Mani"
          git add .
          if git diff --cached --exit-code --quiet; then
            echo "No changes detected in deployment.yaml. Skipping commit and branch creation."
            echo "SKIP_BRANCH=true" >> $GITHUB_ENV
          else
            echo "Changes detected. Committing changes."
            git commit -m "Updated deployment.yaml for [node] with version $VERSION | GitHub Actions Pipeline"
            echo "SKIP_BRANCH=false" >> $GITHUB_ENV
          fi

      - name: Create and push new branch with version (if changes exist)
        if: env.SKIP_BRANCH == 'false' # Only run if changes exist
        run: |
          NEW_BRANCH="node-aud-v$VERSION"
          cd k8s-test/node
          git checkout -b "$NEW_BRANCH"

          if git ls-remote --exit-code --heads origin node-aud-v$VERSION; then
              echo "Branch $NEW_BRANCH already exists"
              echo "Pulling from $NEW_BRANCH"
              git pull origin $NEW_BRANCH --no-rebase
          fi

          echo "Pushing branch $NEW_BRANCH to origin..."
          git push origin "$NEW_BRANCH"
          echo "Branch $NEW_BRANCH created and pushed successfully."
